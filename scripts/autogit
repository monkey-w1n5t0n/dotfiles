#!/usr/bin/bb
(require '[babashka.fs :as fs]
         '[clojure.java.shell :refer [sh with-sh-dir]])

(def usage-str "USAGE: autogit <GIT DIR> <WORK TREE> [<LOG FILE>]")
(def default-log-file-name "autogit_log.txt")

;; Amount of time that needs to pass from last edit for Autogit to commit.
(def default-time-to-wait (* 60 5 1000))
;; TODO read this from CLI args
(def time-to-wait default-time-to-wait)

;;;; UTILS
;; TODO also check if git-dir is actually a repo
(defn valid-args? [args]
  (and (<= 2 (count args) 3)
       (fs/directory? (nth args 0))
       (fs/directory? (nth args 1))))

(defn pprint-str [obj]
  (with-out-str (pprint obj)))

(defn append-to-file [f s]
  (spit f s :append true))

(defn clear-file [f]
  (spit f ""))

(defn get-formated-time []
  (.format (java.text.SimpleDateFormat. "yyy-mm-dd-HH:mm:ss")
           (new java.util.Date)))

(defn seconds-between-dates [a b]
  (->
   (abs (/ (- (.getTime a)
              (.getTime b))
           1000))
   float))

(defn process-suceeded? [output]
  (= 0 (:exit output)))

(def process-failed? (complement process-suceeded?))

;; LOG utils
(defn wrap-with [s wrapper]
  (let [known-pairs {:curly  [\{ \}]
                     :square [\[ \]]
                     :brace  [\( \)]
                     :star   [\* \*]
                     :quote  [\" \"]
                     :angle  [\< \>]}]
    (when-let [pair (wrapper known-pairs)]
      (str (first pair) s (second pair)))))

(defn process-log-msg [s]
  (let [contains-newline? (clojure.string/includes? s "\n")
        line-begin "\n  >> "]
    (str (if contains-newline? line-begin "")
         (clojure.string/replace s #"\n" line-begin))))

(defn log
  ([log-file msg] (log :info log-file msg))
  ([msg-type log-file msg]
   (let [wrapper :square
         sep " "
         wrap (fn [s] (wrap-with s wrapper))
         time (get-formated-time)
         ;; section-sep
         type-str (msg-type {:info "Info"
                             :warning "Warn"
                             :error "ERROR"})
         msg (process-log-msg msg)
         line (str (wrap time)
                   sep
                   (wrap type-str)
                   sep
                   msg
                   "\n")]
     (append-to-file log-file line))))
;;;; /UTILS

;;;; STATE
;; (declare ^:dynamic *git-dir*)
;; (declare ^:dynamic *work-tree*)
;; (declare ^:dynamic *log-file*)


;;;; /STATE

;;;; LOGIC
(defn print-usage-and-exit! []
  (binding [*out* *err*]
    (println (str "\nInvalid arguments " *command-line-args* ", usage:"))
      (println usage-str)
      (System/exit 1)))

(defn start-watching!
  "Spin `inotifywait` to recursively watch a directory
  for modifications to the containing files."
  [d]
  (sh "inotifywait" "-e" "modify,create,move,delete" "-r" d))

(defn git-autocommit!
  "Execute an autocommit "
  [git-dir work-tree]
  (let [git (str "git --git-dir=" git-dir " --work-tree=" work-tree " ")
        add "add ."
        commit (str "commit -am 'Automatic Commit: " (get-formated-time) "'")
        cmd-seq [(str git add)
                 (str git commit)]]
    (doall (for [cmd cmd-seq]
             (sh "bash" "-c" cmd)))))

(defn print-error-and-exit! [log-file result git-dir]
  (log :error
       log-file
       (str "Watchers failed to start\nOutput:"
            (pprint-str result)))
  (sh "notify-send" "--wait" (str "Autogit failed: " git-dir))
  (System/exit 1))

(defn now []
  (new java.util.Date))

(defn should-commit? [last-change-time current-time]
  (-> (seconds-between-dates last-change-time current-time)
      (>= time-to-wait)))

(defn how-long-to-sleep? [last-change-time current-time]
  (->> (seconds-between-dates last-change-time current-time)
       (- time-to-wait)
       (* 1000)))

(defn cheeky-extra-log-file [log-file]
  (clojure.string/replace log-file #"([^\/]*)(\..*)" "$1_extra$2"))

;; TODO: DRY
(defn log-git-result! [results log-file]
  (-> log-file cheeky-extra-log-file (log (pprint-str results)))
  (if (every? process-suceeded? results)
    (log :info log-file
         (str "Commit successful:\n"
              "git add: " (:out (nth results 0))
              "\n"
              "git commit: " (:out (nth results 1))))
    (log :warning log-file
         (str "Commit failed:"
              "git add: " (:err (nth results 0))
              "\n"
              "git commit: " (:err (nth results 1))))))

(defn commit-and-log! [git-dir work-tree log-file]
  (-> (git-autocommit! git-dir work-tree)
      (log-git-result! log-file)))

;; TODO: surely there's a more functional way to do this
(defn main-loop [git-dir work-tree log-file]
  (let [*last-change-time (atom (now))
        *anything-changed? (atom false)
        *f (future
             (loop []
               ;; (log log-file "Thread: Sleeping...")
               (Thread/sleep
                (if @*anything-changed?
                  (how-long-to-sleep? @*last-change-time (now))
                  time-to-wait))
               ;; (log log-file "Thread: Awake...")
               (when (and @*anything-changed?
                          (should-commit? @*last-change-time (now)))
                 (do
                   ;; (log log-file "Thread: Committing...")
                   (commit-and-log! git-dir work-tree log-file)
                   (reset! *anything-changed? false)))
               (recur)))]
    (loop []
      ;; (log log-file "Starting watcher...")
      (let [result (start-watching! work-tree)]
        (when-not (process-suceeded? result)
          ;; [Exit #2]
          ;; If we're here, `inotifywait` failed to set up watchers :(
          (print-error-and-exit! log-file result git-dir))
        ;; If we're here, it means that watchers were set up
        ;; properly and that a change was detected
        ;; (log log-file "Change detected!")
        (reset! *anything-changed? true)
        (reset! *last-change-time (now))
        (recur)))))

(defn -main [& args]
  (let [args (first args)]
    (when-not (valid-args? args)
      ;; [Exit #1]
      (print-usage-and-exit!))
    (let [[git-dir work-tree log-file] args
          log-file (or log-file
                       (str git-dir "/" default-log-file-name))
          log-start-header (str "============== Starting Autogit...")]
      ;; Starting...
      (log log-file log-start-header)
      (main-loop git-dir work-tree log-file)))
  ;; [Exit #3]
  (System/exit 0))

(-main *command-line-args*)
