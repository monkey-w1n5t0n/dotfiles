#+TITLE: w1n5t0n's Config of Doom
#+PROPERTY: header-args:elisp :tangle ./config.el
#+STARTUP: fold
* i3
#+begin_src i3wm :tangle ~/.config/i3/config
# hi
# i3 config file (v4)
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

# Set keyboard layout and background picture
exec .config/keyboard/setup_keyboard.sh
exec --no-startup-id feh --bg-scale /home/w1n5t0n/Documents/wallpapers/abstract1.jpg
exec --no-startup-id emacs --daemon

# Default terminal:
set $terminal alacritty
# set $editor "emacsclient -c" # alias for emacsclient
set $file pcmanfm

# Set mod key (Mod1=<Alt>, Mod4=<Super>)
set $mod Mod4

# set default desktop layout (default is tiling)
# workspace_layout tabbed <stacking|tabbed>

# Configure border style <normal|1pixel|pixel xx|none|pixel>
default_border pixel 1
default_floating_border normal

for_window [class="^.*"] border pixel 3

# Hide borders
hide_edge_borders none

# change borders
#bindsym $mod+f border none


# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font xft:URWGothic-Book 11

# Use Mouse+$mod to drag floating windows
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec $terminal

# Start emacs
bindsym $mod+m exec "emacsclient -c"

# Start file browser
bindsym $mod+f exec $file

# kill focused window
bindsym $mod+w kill

# start program launcher
# bindsym $mod+e exec --no-startup-id dmenu_recency
bindsym $mod+e exec --no-startup-id ~/scripts/launch_rofi
# bindsym $mod+d exec --no-startup-id rofi -show drun -run-shell-command '{terminal} -e zsh -ic "{cmd} && read"'
# launch categorized menu
bindsym $mod+z exec --no-startup-id morc_menu

################################################################################################
## sound-section - DO NOT EDIT if you wish to automatically upgrade Alsa -> Pulseaudio later! ##
################################################################################################

exec --no-startup-id volumeicon
bindsym $mod+Ctrl+m exec terminal -e 'alsamixer'
#exec --no-startup-id pulseaudio
#exec --no-startup-id pa-applet
#bindsym $mod+Ctrl+m exec pavucontrol

################################################################################################

# Screen brightness controls
# bindsym XF86MonBrightnessUp exec "xbacklight -inc 10; notify-send 'brightness up'"
# bindsym XF86MonBrightnessDown exec "xbacklight -dec 10; notify-send 'brightness down'"

# Start Applications
bindsym $mod+Ctrl+b exec terminal -e 'bmenu'
bindsym $mod+b exec firefox
bindsym $mod+F3 exec pcmanfm
# bindsym $mod+F3 exec ranger
bindsym $mod+Shift+F3 exec pcmanfm_pkexec
bindsym $mod+F5 exec terminal -e 'mocp'
#bindsym $mod+y exec --no-startup-id pkill picom
bindsym $mod+Ctrl+t exec --no-startup-id picom -b
#bindsym $mod+Shift+d --release exec "killall dunst; exec notify-send 'restart dunst'"


# Screenshots
bindsym Print exec --no-startup-id i3-scrot
# bindsym --release $mod+Print exec screenshot-select
bindsym $mod+Print --release exec --no-startup-id i3-scrot -w
bindsym $mod+Shift+Print --release exec --no-startup-id i3-scrot -s
bindsym $mod+Shift+d exec xdg-open /usr/share/doc/manjaro/i3_help.pdf
bindsym $mod+Ctrl+x --release exec --no-startup-id xkill

focus_follows_mouse no

# change focus
bindsym $mod+h focus left
bindsym $mod+t focus down
bindsym $mod+n focus up
bindsym $mod+s focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+t move down
bindsym $mod+Shift+n move up
bindsym $mod+Shift+s move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# workspace back and forth (with/without active container)
workspace_auto_back_and_forth yes
bindsym $mod+y workspace back_and_forth
bindsym $mod+Shift+b move container to workspace back_and_forth; workspace back_and_forth

# split orientation
bindsym $mod+k split h;exec notify-send 'tile horizontally'
bindsym $mod+j split v;exec notify-send 'tile vertically'
bindsym $mod+q split toggle

# toggle fullscreen mode for the focused container
bindsym $mod+u fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+o layout stacking
bindsym $mod+comma layout tabbed
bindsym $mod+period layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# toggle sticky
bindsym $mod+Shift+o sticky toggle

# focus the parent container
bindsym $mod+a focus parent

# move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

#navigate workspaces next / previous
bindsym $mod+Ctrl+Right workspace next
bindsym $mod+Ctrl+Left workspace prev

# Workspace names
# to display names or symbols instead of plain workspace numbers you can use
# something like: set $ws1 1:mail
#                 set $ws2 2:ï‚¬
set $ws1 1
set $ws2 2
set $ws3 3
set $ws4 4
set $ws5 5
set $ws6 6
set $ws7 7
set $ws8 8

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8

# Move focused container to workspace
bindsym $mod+Ctrl+1 move container to workspace $ws1
bindsym $mod+Ctrl+2 move container to workspace $ws2
bindsym $mod+Ctrl+3 move container to workspace $ws3
bindsym $mod+Ctrl+4 move container to workspace $ws4
bindsym $mod+Ctrl+5 move container to workspace $ws5
bindsym $mod+Ctrl+6 move container to workspace $ws6
bindsym $mod+Ctrl+7 move container to workspace $ws7
bindsym $mod+Ctrl+8 move container to workspace $ws8

# Move to workspace with focused container
bindsym $mod+Shift+1 move container to workspace $ws1; workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2; workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3; workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4; workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5; workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6; workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7; workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8; workspace $ws8

# Open applications on specific workspaces
# assign [class="Thunderbird"] $ws1
# assign [class="Pale moon"] $ws2
# assign [class="Pcmanfm"] $ws3
# assign [class="Skype"] $ws5

# Open specific applications in floating mode
for_window [title="alsamixer"] floating enable border pixel 1
for_window [class="calamares"] floating enable border normal
for_window [class="Clipgrab"] floating enable
for_window [title="File Transfer*"] floating enable
for_window [class="fpakman"] floating enable
for_window [class="Galculator"] floating enable border pixel 1
for_window [class="GParted"] floating enable border normal
for_window [title="i3_help"] floating enable sticky enable border normal
for_window [class="Lightdm-settings"] floating enable
for_window [class="Lxappearance"] floating enable sticky enable border normal
for_window [class="Manjaro-hello"] floating enable
for_window [class="Manjaro Settings Manager"] floating enable border normal
for_window [title="MuseScore: Play Panel"] floating enable
for_window [class="Nitrogen"] floating enable sticky enable border normal
for_window [class="Oblogout"] fullscreen enable
for_window [class="octopi"] floating enable
for_window [title="About Pale Moon"] floating enable
for_window [class="Pamac-manager"] floating enable
for_window [class="Pavucontrol"] floating enable
for_window [class="qt5ct"] floating enable sticky enable border normal
for_window [class="Qtconfig-qt4"] floating enable sticky enable border normal
for_window [class="Simple-scan"] floating enable border normal
for_window [class="(?i)System-config-printer.py"] floating enable border normal
for_window [class="Skype"] floating enable border normal
for_window [class="Timeset-gui"] floating enable border normal
for_window [class="(?i)virtualbox"] floating enable border normal
for_window [class="Xfburn"] floating enable

# switch to workspace with urgent window automatically
for_window [urgent=latest] focus

# reload the configuration file
bindsym $mod+Shift+c reload

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# exit i3 (logs you out of your X session)
bindsym $mod+Shift+0 exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# Set shut down, restart and locking features
bindsym $mod+0 mode "$mode_system"
set $mode_system (l)ock, (e)xit, switch_(u)ser, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id i3exit lock, mode "default"
    bindsym s exec --no-startup-id i3exit suspend, mode "default"
    bindsym u exec --no-startup-id i3exit switch_user, mode "default"
    bindsym e exec --no-startup-id i3exit logout, mode "default"
    bindsym h exec --no-startup-id i3exit hibernate, mode "default"
    bindsym r exec --no-startup-id i3exit reboot, mode "default"
    bindsym Shift+s exec --no-startup-id i3exit shutdown, mode "default"

    # exit system mode: "Enter" or "Escape"
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

# Resize window (you can also use the mouse for that)
bindsym $mod+r mode "resize"
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
        # Pressing left will shrink the windowâ€™s width.
        # Pressing right will grow the windowâ€™s width.
        # Pressing up will shrink the windowâ€™s height.
        # Pressing down will grow the windowâ€™s height.
        bindsym h resize shrink width 5 px or 5 ppt
        bindsym t resize grow height 5 px or 5 ppt
        bindsym n resize shrink height 5 px or 5 ppt
        bindsym s resize grow width 5 px or 5 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # exit resize mode: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

# Lock screen
bindsym $mod+9 exec --no-startup-id blurlock

# Autostart applications
exec_always --no-startup-id ~/.config/polybar/launch.sh #--material
exec        --no-startup-id xset r rate 250 40

exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec --no-startup-id nitrogen --restore; sleep 1; picom -b --corenr-radius 10
exec --no-startup-id nm-applet
exec --no-startup-id xfce4-power-manager
exec --no-startup-id pamac-tray
exec --no-startup-id clipit
exec --no-startup-id blueman-applet
# exec_always --no-startup-id sbxkb
#exec --no-startup-id start_conky_maia
# exec --no-startup-id start_conky_green
exec --no-startup-id xautolock -time 40 -locker blurlock
exec_always --no-startup-id ff-theme-util
exec_always --no-startup-id fix_xcursor

# Color palette used for the terminal ( ~/.Xresources file )


# Colors are gathered based on the documentation:
# https://i3wm.org/docs/userguide.html#xresources
# Change the variable name at the place you want to match the color
# of your terminal like this:
# [example]
# If you want your bar to have the same background color as your
# terminal background change the line 362 from:
# background #14191D
# to:
# background $term_background
# Same logic applied to everything else.
# set_from_resource $term_background background
# set_from_resource $term_foreground foreground
# set_from_resource $term_color0     color0
# set_from_resource $term_color1     color1
# set_from_resource $term_color2     color2
# set_from_resource $term_color3     color3
# set_from_resource $term_color4     color4
# set_from_resource $term_color5     color5
# set_from_resource $term_color6     color6
# set_from_resource $term_color7     color7
# set_from_resource $term_color8     color8
# set_from_resource $term_color9     color9
# set_from_resource $term_color10    color10
# set_from_resource $term_color11    color11
# set_from_resource $term_color12    color12
# set_from_resource $term_color13    color13
# set_from_resource $term_color14    color14
# set_from_resource $term_color15    color15

# Start i3bar to display a workspace bar (plus the system information i3status if available)


# hide/unhide i3status bar
#bindsym $mod+m bar mode toggle

set $color1  #1d1f21
set $color2  #282a2e
set $color3  #373b41
set $color4  #c5c8c6
set $color5  #969896
set $color6  #cc6666
set $color7  #de935f
set $color8  #f0c674
set $color9  #b5bd68
set $color10 #8abeb7
set $color10-1 #519189
set $color11 #81a2be
set $color12 #b294bb
set $color13 #aeafad
set $color14 #000000
set $color15 #666666
set $color16 #FF3334
set $color17 #9ec400
set $color18 #b777e0
set $color19 #54ced6
set $color20 #ECEFF4
set $color21 #8FBCBB
set $color22 #CB4B16

# Theme colors
# class                   border        backgr.      text          indic.   child_border
  client.focused          $color10-1    $color10-1   $color20      #A3BE8C
  client.focused_inactive $color3       $color3      $color20      #454948
  client.unfocused        $color2       $color2      $color20      #454948
  client.urgent           $color22      #FDF6E3      $color20      #268BD2
  client.placeholder      #000000       #0c0c0c      $color20      #000000

  client.background       #2E3440

#############################
### settings for i3-gaps: ###
#############################

# Set inner/outer gaps
gaps inner 23
gaps outer 00

# Additionally, you can issue commands with the following syntax. This is useful to bind keys to changing the gap size.
# gaps inner|outer current|all set|plus|minus <px>
# gaps inner all set 10
# gaps outer all plus 5

# Smart gaps (gaps used if only more than one container on the workspace)
#smart_gaps on

# Smart borders (draw borders around container only if it is not the only container on this workspace)
# on|no_gaps (on=always activate and no_gaps=only activate if the gap size to the edge of the screen is 0)
#smart_borders on

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
set $mode_gaps Gaps: (o) outer, (i) inner
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)
bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
        bindsym o      mode "$mode_gaps_outer"
        bindsym i      mode "$mode_gaps_inner"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_inner" {
        bindsym plus  gaps inner current plus 5
        bindsym minus gaps inner current minus 5
        bindsym 0     gaps inner current set 0

        bindsym Shift+plus  gaps inner all plus 5
        bindsym Shift+minus gaps inner all minus 5
        bindsym Shift+0     gaps inner all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_outer" {
        bindsym plus  gaps outer current plus 5
        bindsym minus gaps outer current minus 5
        bindsym 0     gaps outer current set 0

        bindsym Shift+plus  gaps outer all plus 5
        bindsym Shift+minus gaps outer all minus 5
        bindsym Shift+0     gaps outer all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
#+end_src
* Doom-specific
** Init
*** Helper Text
#+begin_src elisp :tangle no
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
*** Block
#+begin_src elisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;;doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       (format +onsave)    ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;; objed             ; text object editing for the innocent
       ;;parinfer            ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell              ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +peek)
       magit               ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       (cc +lsp)                 ; C/C++/Obj-C madness
       clojure             ; java with a lisp
       common-lisp         ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       faust               ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +dante)    ; a language that's lazier than I am
       hy                  ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json                ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       lua                 ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       nim                 ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2 +dragndrop
            +hugo +journal +noter
            +pomodoro +pretty +present)                 ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python              ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket              ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust                ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       scheme              ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

*** Re-tangle on save
#+begin_src elisp :tangle init.el
;; (add-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src
** Config
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "w1n5t0n"
      user-mail-address "lm-w1n5t0n@protonmail.com")

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* Packages
** Help
#+begin_src elisp :tangle no
;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
** Misc
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(package! command-log-mode
  :recipe (:host github :repo "lewang/command-log-mode"))

;; (package! slime
;;   :recipe (:host github :repo "slime/slime"))

;; (package! tree-sitter
;;   :recipe (:host github :repo "tree-sitter/tree-sitter"))

;; (package! tree-sitter-langs)




;; ORG-ROAM stuff


;; (package! emacsql)
;; (package! emacsql-sqlite)
;; (package! magit-section)
;; (package! org-roam)

;; (use-package! org-roam
;;   :config
;;   (setq org-roam-directory "~/phd/org-roam-files")
;;   (org-roam-setup)
;;   )


(package! org-download)

(package! aggressive-indent)

(package! org-roam-ui)

(package! org-bullets)

(package! org-roam :pin "65ea325")

(package! rainbow-mode)
#+end_src
** Language Support
#+begin_src elisp :tangle packages.el
;; Random fix to bug, see here: https://github.com/hlissner/doom-emacs/issues/5667
(package! gitconfig-mode
	  :recipe (:host github :repo "magit/git-modes"
			 :files ("gitconfig-mode.el")))
(package! gitignore-mode
	  :recipe (:host github :repo "magit/git-modes"
			 :files ("gitignore-mode.el")))
(package! sclang-extensions)
;; (package! scel)                         ;
(package! v-mode)
(unpin! tidal)
(package! tidal)

(package! extempore-mode
  :recipe (:host github
           :repo "extemporelang/extempore-emacs-mode"))

(package! kbd-mode
  :recipe (:host github
           :repo "kmonad/kbd-mode"))

(package! edn)

(package! org-transclusion)
#+end_src
* Org
** Org
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

(use-package! org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;; (add-hook 'org-mode-hook '(lambda ()
;;                             (visual-fill-column 1)
;;                             (setq visual-fill-column-center-text t)))
#+end_src
** Org Roam
#+begin_src elisp
;; From https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)
    ;;(evil-forward-word-end) FIXME: doesn't work
    ))

(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/research/org-roam")
  (org-roam-completion-everywhere t)
  (org-roam-mode-section-functions
   (list #'org-roam-backlinks-section
         #'org-roam-reflinks-section
         ;; #'org-roam-unlinked-references-section
         ))
  ;; :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;        ("C-c n f" . org-roam-node-find)
  ;;        ("C-c n i" . org-roam-node-insert)
  ;;        :map org-mode-map
  ;;        ("C-M-i" . completion-at-point)
  ;;        :map org-roam-dailies-map
  ;;        ("Y" . org-roam-dailies-capture-yesterday)
  ;;        ("T" . org-roam-dailies-capture-tomorrow))
  ;; :bind-keymap
  ;; ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (require 'org-roam-protocol)
  (org-roam-db-autosync-mode)
  (map!
   ;; :map org-mode-map
   "C-M-h" 'completion-at-point
   "C-c n i" 'org-roam-node-insert
   "C-c n u" 'org-roam-node-insert-immediate)
  )

#+end_src
*** TODO: delete?
#+begin_src elisp :tangle no
;; (map!
;;  :map override
;;  "C-c n l" 'org-roam-buffer-toggle
;;  "C-c n f" 'org-roam-node-find
;;  "C-c n i" 'org-roam-node-insert
;;  "C-c n g" 'org-roam-graph
;;  "C-c n i" 'org-roam-node-insert
;;  "C-c n c" 'org-roam-capture
;;  ;; Dailies
;;  "C-c n j" 'org-roam-dailies-capture-today

;;  "C-M-s" 'completion-at-point
;; )
#+end_src
** Org Noter
#+begin_src elisp
(use-package! org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame;'horizontal-split;; 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   ;; org-noter-notes-search-path (list org_notes)
   )
  )

#+end_src
* Package Config
#+begin_src elisp
(use-package! kbd-mode)
#+end_src
** Ace Window
#+begin_src elisp
(use-package! ace-window
  ;; :bind (("M-o" . ace-window))
  :custom
  (aw-scope 'frame)
  (aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n))
  (aw-minibuffer-flag t)
  :config
  (ace-window-display-mode 1))
#+end_src
** Org Roam
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

(use-package! org-transclusion
              :after org
              :init
              (map!
               :map global-map
               "<f12>"   #'org-transclusion-add
               "C-<f12>" #'org-transclusion-remove
               :leader
               :prefix "n"
               :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+end_src
* Projects
#+begin_src elisp
(setq projectile-project-search-path '("~/dev"))
#+end_src
* Cursor Behaviour
#+begin_src elisp
(setq
 evil-repeat-move-cursor t
 evil-move-cursor-back nil ;; TODO do I want this?
 evil-move-beyond-eol nil
 evil-cross-lines t
 evil-respect-visual-line-mode t
 evil-track-eol t ;; TODO what does this actually do?
 evil-start-of-line nil)
#+end_src
* Visuals
** Theme
#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
(set-face-attribute 'default nil :height 130)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-nord)

(setq doom-theme 'doom-tomorrow-night)
;; (setq doom-theme 'doom-material)

#+end_src
*** Cursor Appearance
#+begin_src elisp
;; Other colours:
;; "#00ffa9"
;; "#C0E8F9"
;;  #88C0D0
;; From tomorrow night theme
;;  #6d9fa1 complimented by "#FF6B6B"

;; (setq normal-cursor-color   "#1BE7FF")
;; (setq operator-cursor-color "#ff0054")

;; (setq operator-cursor-color "#bf616a")



(setq normal-cursor-color   "#FF6B6B")
(setq operator-cursor-color "#6d9fa1")

(setq evil-normal-state-cursor   `(box    ,normal-cursor-color)
      evil-insert-state-cursor   `(bar    ,normal-cursor-color)
      evil-visual-state-cursor   `(hollow ,normal-cursor-color)
      evil-motion-state-cursor   `(bar    ,normal-cursor-color)
      evil-replace-state-cursor  `(bar    ,normal-cursor-color)
      evil-operator-state-cursor `(evil-half-cursor ,operator-cursor-color))
#+end_src
** Others
#+begin_src elisp
(use-package! rainbow-mode
  :hook
  (prog-mode . rainbow-mode))
#+end_src
** Line wrapping
#+begin_src elisp
;; (add-hook 'org-mode-hook 'visual-fill-column-mode)
;; (add-hook 'minibuffer-mode-hook '(lambda () (visual-fill-column-mode 0)))
(global-visual-fill-column-mode 1)
(setq-default fill-column 78)
(setq-default visual-fill-column-width 90)
(setq-default visual-fill-column-center-text t)
;; (set-fill-column 90)
;; (setq-local visual-fill-column-center-text t)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

(add-hook 'minibuffer-mode-hook
          #'(lambda ()
             ;; (setq-local visual-fill-column-center-text nil)
             (visual-fill-column-mode 0)
             (setq-local visual-fill-column-center-text nil)
             ))
#+end_src
* Functions
#+begin_src elisp
(defun my/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
         (filename (buffer-file-name))
         (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

;; based on http://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/
(defun my/delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))
#+end_src
* TODO Projects
#+begin_src elisp
(projectile-add-known-project "~/dev/lang/carp")
(projectile-add-known-project "~/dev/lang/v")
(projectile-add-known-project "~/dev/lang/mal")
#+end_src
* TODO Key Bindings
** TODO Emacs
#+begin_src elisp
(defun my/open-private-config ()
  (find-file  "~/.config/doom/config.org"))

;; FIXME don't work
(map! :map doom-leader-file-map
      :nvm "p" 'my/open-private-config)

(map! :map doom-leader-map
      :nvm "f p" 'my/open-private-config)

(map! :nvmi "M-q" 'counsel-M-x)
#+end_src

#+RESULTS:

** Big Picture
#+begin_src elisp :tangle no
;; TODO
#+end_src
** Navigation
- TODO figure out where to put ~+eval:region~, originally under ~g r~
#+begin_src elisp
(map!
 :map override

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; LEFT - DOWN - UP - RIGHT
 :nvm "h" 'backward-char
 :nvm "t" 'evil-next-visual-line
 :nvm "n" 'evil-previous-visual-line
 :nvm "s" 'forward-char

 :nvm "H" 'evil-backward-word-begin
 :nvm "T" 'evil-forward-paragraph
 :nvm "N" 'evil-backward-paragraph
 :nvm "S" 'evil-forward-word-end


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; By Lines
 :nvm "D"  'evil-beginning-of-visual-line
 :nvm "gg" 'evil-beginning-of-visual-line
 :nvm "_"  'evil-end-of-visual-line
 :nvm "gr" 'evil-end-of-visual-line

 ;; Top and Bottom
 :nvm "gc" 'evil-goto-first-line
 :nvm "gt" 'evil-goto-line

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Scrolls
 :nvm "G" 'evil-scroll-down
 :nvm "R" 'evil-scroll-up


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Go anywhere on the screen
 :nvm "a" 'evil-avy-goto-char


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Snipes
 ;; TODO: Distinguish between them, write some comments
 :nvm "cg" 'evil-snipe-F
 :nvm "cG" 'evil-snipe-T
 :nvm "cr" 'evil-snipe-f
 :nvm "cR" 'evil-snipe-t
 :nvm "cc" 'evil-snipe-repeat

 )

;; FIXME: why does this mess up the normal map?
;; (map! :map evil-snipe-local-mode-map
;;       :nvm "u" 'evil-snipe-repeat
;;       :nvm "o" 'evil-snipe-repeat-reverse

;;       :nvm "r" 'evil-snipe-repeat
;;       :nvm "g" 'evil-snipe-repeat-reverse
;;       )
#+end_src
*** TODO Navigating inside minibuffers
#+begin_src elisp
;; (map! :map minibuffer-mode-map
;;       "C-t" 'next-line
;;       "C-n" 'previous-line
;;       )
#+end_src
** Modes
#+begin_src elisp
(map!
 :map override
 ;; Insert
 :nvm "i" 'evil-append
 :nvm "I" 'evil-append-line
 :nvm "u" 'evil-insert
 :nvm "U" 'evil-insert-line

 :nvm "j" 'evil-change
 )

(map!
 :map 'doom-leader-notes-map
 :n "r e" 'org-roam-tag-add
 :n "r E" 'org-roam-tag-remove

 :n "r o" 'org-roam-alias-add
 :n "r O" 'org-roam-alias-add
 )
#+end_src
** Text Editing
*** Misc
#+begin_src elisp
;; (map! :map doom-leader-code-map         ;
;;       :n ";" 'comment-line
;;       )


(map!
 :map override

 ;; :n "u" nil
 :n ";" 'evil-undo
 :n ":" 'evil-redo

 :nv "e" 'evil-delete
 :nv "E" 'evil-delete-whole-line

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Paste
 :n "p" 'evil-paste-after ;; -from-0
 ;; TODO: make it work even if cursor is inside parens
 :nv "C-M-'" 'indent-pp-sexp


 :v "SPC c /" 'comment-or-uncomment-region
 )

;;   "'" 'evil-ex

;;


;;
;;

;;

;;   "ou" 'evil-open-below
;;   "oe" 'evil-open-above

;;   "ou" 'sp-select-next-thing


;;   "-" 'newline-and-indent

;;   "k" 'evil-scroll-page-down
;;   "K" 'evil-scroll-page-up

;;   "SPC w h" 'evil-window-left
;;   "SPC w s" 'evil-window-right

;;   "SPC w t" 'evil-window-bottom
;;   "SPC w n" 'evil-window-up



;;;;;;;;;;;;;;
;; GENERAL
;;;;;;;;;;;;;;


(map!
 "C-{" 'text-scale-decrease
 "C-}" 'text-scale-increase
 )




;; (general-def
;;   :states '(normal insert)
;;   :keymaps 'cider-mode-map
;;   "C-c C-e" 'cider-eval-defun-at-point)

;; (general-def
;;   :states '(normal visual motion)
;;   :keymaps 'visual-line-mode-map
;;   "t" 'evil-next-visual-line
;;   "n" 'evil-previous-visual-line)



;; (defun tidal-extract-synth-name (code-str)
;;   )

;; (defun tidal-mute-synth ()
;;   (interactive)
;;   (mark-paragraph)
;;   (let* ((s (buffer-substring-no-properties (region-beginning)
;;                                             (region-end)))
;;          (synth-name (if tidal-literate-p
;;                  (tidal-unlit s)
;;                s)))
;;     (tidal-send-string ":{")
;;     (tidal-send-string s*)
;;     (tidal-send-string ":}")
;;     (mark-paragraph)
;;     (pulse-momentary-highlight-region (mark) (point))
;;     )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; TIDAL
(map!
 ;; :states '(normal insert)
 :map 'tidal-mode-map
 :ni "C-c C-l" #'(lambda ()
                   (interactive)
                   (save-excursion
                     (tidal-run-line)))
 ;; (evil-previous-visual-line))

 ;; randomly change the prompt each time something evaluates
 ;; "C-c C-u" (lambda ()
 ;;             (interactive)
 ;;             (tidal-run-multiple-lines)
 ;;             (let (()))
 ;;             (tidal-)
 ;;             )
 ;;
 ;;
 :ni "C-c C-h" #'(lambda ()
                   (interactive)
                   (tidal-send-string "hush"))

 :ni "C-c C-p" #'(lambda ()
                   (interactive)
                   (tidal-send-string "panic"))
 ;; :ni "C-c C-e" #'(lambda ()
 ;;                   (interactive)
 ;;                   (save-excursion
 ;;                     (tidal-eval-multiple-lines)))
 )

;; (general-def
;;   :states 'normal
;;   :keymaps 'override
;;   :prefix doom-leader-key

;;   "b s" 'save-buffer

;;   "w h" 'evil-window-left
;;   "w s" 'evil-window-right
;;   "w t" 'evil-window-down
;;   "w n" 'evil-window-up

;;   "w H" '+evil/window-move-left
;;   "w S" '+evil/window-move-right
;;   "w T" '+evil/window-move-down
;;   "w N" '+evil/window-move-up


;;   "k n" 'sp-up-sexp
;;   "k t" 'sp-down-sexp
;;   "k h" 'sp-backward-sexp
;;   "k s" 'sp-forward-sexp

;;   "k b h" 'sp-backward-barf-sexp
;;   "k b s" 'sp-forward-barf-sexp

;;   "k m h" 'sp-slurp-hybrid-sexp

;;   "k d" 'sp-splice-sexp

;;   "k e" 'sp-kill-sexp)


;; (defun browse-scored ()
;;   (interactive)
;;   (doom-project-browse "~/dev/scored"))



;; (map!
;;  )

;; ;;"SPC-f-." 'counsel-find-file


;; ;;
;; ;;
;; ;;(lookup-key (current-global-map) (kbd "Esc-g"))


;; ;; (load "/home/w1n5t0n/dev/timelines-hs/timelines-emacs/timelines-mode.el")
;; ;; (setq timelines-path "/home/w1n5t0n/dev/timelines-hs/timelines-hs")

;; (load "/home/w1n5t0n/dev/emute_6/timelines/timelines-emacs/timelines-mode.el")
;; (setq timelines-path "/home/w1n5t0n/dev/emute_6/timelines/timelines-hs")

;; (general-def

;; ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
;; ;; ;; Replace "sbcl" with the path to your implementation
;; (setq inferior-lisp-program "/usr/bin/sbcl")

;; (add-to-list 'load-path "/home/w1n5t0n/.local/share/SuperCollider/downloaded-quarks/scel/el")
;; (require 'sclang)
;; (add-hook 'sclang-mode-hook 'sclang-extensions-mode)
#+end_src
*** Lisp
#+begin_src elisp
;; FIXME: getting "error key sequence os starts with non-prefix key o"
;; Replaced with general-def block below
(map!
 ;; :prefix "o"
 :n "o" nil
 :n "o u" 'evil-open-below
 :n "o U" 'evil-open-above

 :n "o s" 'sp-slurp-hybrid-sexp
 :n "o S" 'sp-forward-barf-sexp
 :n "o h" 'sp-backward-slurp-sexp
 :n "o H" 'sp-backward-barf-sexp
 )

;; (general-def
;;   :state 'normal
;;   "o s" 'sp-slurp-hybrid-sexp
;;   "o S" 'sp-forward-barf-sexp
;;   "o h" 'sp-backward-slurp-sexp
;;   "o H" 'sp-backward-barf-sexp
;;  )


#+end_src

** TODO Project
Read proper list of project paths from somewhere.
#+begin_src elisp
;; (map! "SPC p c" 'projectile-compile-project)
(after! counsel
  (map! [remap projectile-compile-project] nil))
#+end_src

** Notes
#+begin_src elisp
#+end_src
* TODO More
** Multiple Cursors
** Direct navigation to files
* Auto chmod +x
Automatically set a script's execution permissions (TODO: good idea?)
#+begin_src elisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

* Test1
