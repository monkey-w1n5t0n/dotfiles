#+TITLE: w1n5t0n's Emacs config file
* Functions
** Misc
#+BEGIN_SRC elisp
  (defun even? (n) (= (% n 2) 0))
  (defun odd? (n) (not (even? n)))

  (defun take (num l)
    (butlast l (- (length l) num)))
  (defalias 'drop 'nthcdr)

  (defalias 'symbol->string 'symbol-name)
  (defalias 'string->symbol 'make-symbol)

  (defun slice (offset n l)
    (take n (drop offset l)))

  (defun group-by (num lst)
    (if (= 0 (% (length lst) num))
	(mapcar
	 (lambda (pair-start)
	   (slice pair-start num lst))
	 (number-sequence 0 (- (length lst) 1) num))
      (error "group-by: length is not integer multiple of num")))

  (defmacro defconsts (&rest ps)
    (let ((list-of-defs (mapcar (lambda (x) (cons 'defconst x))
				(group-by 2 ps))))
      `(progn ,@list-of-defs)))


  (defmacro my-let (&rest args)
    (let ((list-of-pairs (group-by 2 (butlast args)))
	  (body (last args)))
      `(let (,@list-of-pairs)
	 ,@body)))

  ;; (contains-element-that? (lambda (x) (eql x '0)) '(1 2 3 4))


  (defun num-elems-until (test list)
    (let ((pos (cl-position 't
			    (mapcar (lambda (x) (funcall test x))
				    list))))
      pos))

  (defun args-contain-rest (args)
    (let* ((list-of-strings
	    (mapcar 'symbol->string args)))
      (filter
       (lambda (str) (string-match-p (regexp-quote "...") str))
       list-of-strings)))

  (defmacro my-lambda (defs body)
    ;; If there's no need to change arguments:
    (if (not (args-contain-rest defs))
	`(lambda (,@defs) ,@body)
      ;; Otherwise:
      (let* ((rest-start
	      (num-elems-until (lambda (x) (eql 't x))
			       (mapcar
				(lambda (x)
				  (if (string-match-p (regexp-quote "...") (symbol->string x))
				      't
				    nil))
				defs)))
	     (first-defs (slice 0 rest-start defs))
	     (rest-binder (string->symbol
			   (substring (symbol->string (nth rest-start defs))
				      0
				      -3))))
	(print (format "defs: %s" defs))
	(print (format "rest-start: %s" rest-start))
	(print (format "rest-binder %s" rest-binder))
	`(lambda (,@first-defs &rest ,rest-binder)))))


#+END_SRC
** Paths
#+BEGIN_SRC elisp
  (defun concat-paths (p1 &rest ps)
    (let ((new-ps
	   (append (mapcar 'file-name-as-directory (butlast ps))
		   (last ps))))
      (apply 'concat (cons
		      (file-name-as-directory p1)
		      new-ps))))


#+END_SRC

** Util
#+BEGIN_SRC elisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer
          (delq (current-buffer)
                (remove-if-not 'buffer-file-name (buffer-list)))))

  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))


  (global-set-key [f12] 'indent-buffer)
#+END_SRC

* Constants
#+BEGIN_SRC elisp
;; Consts
(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst python-p
  (or (executable-find "python3")
      (and (executable-find "python")
           (> (length (shell-command-to-string "python --version | grep 'Python 3'")) 0)))
  "Do we have python3?")

(defconst pip-p
  (or (executable-find "pip3")
      (and (executable-find "pip")
           (> (length (shell-command-to-string "pip --version | grep 'python 3'")) 0)))
  "Do we have pip3?")

(defconst clangd-p
  (or (executable-find "clangd")  ;; usually
      (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
  "Do we have clangd?")

(defconst eaf-env-p
  (and *sys/linux* (display-graphic-p) python-p pip-p
       (not (equal (shell-command-to-string "pip freeze | grep '^PyQt\\|PyQtWebEngine'") "")))
  "Do we have EAF environment setup?")
;; -Consts
#+END_SRC
** Paths
#+BEGIN_SRC elisp

  ;; (progn
  ;;   (defmacro def-const-paths (&rest list)
  ;;     (let ((first-elems ))
  ;;       `(defconsts ,@list)))

  ;;   (macroexpand '(def-const-paths
  ;; 		  p1 ("~")
  ;; 		  p2 (p1 "code"))))


  (defconsts home-d (expand-file-name "~/"))

  ;(defpaths
  ;  *home* "~/"
  ;  *code* (*home* / "code"))



  (defconsts
    ;; Main
    home-d (expand-file-name "~/")
    code-d (concat-paths home-d "code")
    livecode-d (concat-paths home-d "livecode")

    ;; Config
    config-d (concat-paths home-d ".config")
    emacs-config-d (concat-paths config-d "emacs")
    emacs-config-literate-f (concat-paths emacs-config-d "config.org")
    emacs-config-tangled-f (concat-paths emacs-config-d tangled-config)

    ;; TimeLines
    timelines-d (concat-paths livecode-d "timelines")
    timelines-sc-d (concat-paths livecode-d "timelines")
    timelines-emacs-d (concat-paths livecode-d "timelines")

    ;; Misc
    supercollider-d (concat-paths livecode-d "supercollider")
    extempore-d (concat-paths code-d "timelines")
    kymata-d (concat-paths code-d "timelines"))

  (setq explicit-shell-file-name
	"C:/Program Files/Git/bin/bash.exe")
  (setq shell-file-name explicit-shell-file-name)
  (add-to-list 'exec-path "C:/Program Files/Git/bin")

#+END_SRC
* Defaults
#+BEGIN_SRC elisp
  ;;;;;;;;;;;;;; Setup some more user-friendly functionality and defaults (e.g. the usual cut/copy/paste bindings)

  ;; Type 'y' or 'n' instead of 'yes' or 'no'
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Replaces a selection with any letter pressed
  (delete-selection-mode 1)

  (setq scroll-conservatively 100
        select-enable-clipboard t
        show-paren-delay 0
        show-trailing-whitespace nil)


  ;;;;;;;;;;;;;; Setup themes and other aesthetic stuff

  ;; Set the mood, there's plenty of other themes to choose from here:
  ;; https://emacsthemes.ocm/popular/index.html

  ;; Set the window's name
  (setq frame-title-format "TimeLines")

  ;; Remove unecessary distractions from the frame
  (when window-system
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))

;;  (line-number-mode 0)
;; Hook line numbers to only when files are opened, also use linum-mode for emacs-version< 26
(if (version< emacs-version "26")
    (global-linum-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode))

;; Display column numbers in modeline
;;(column-number-mode 1)
  (show-paren-mode 1)

  ;; Cursor settings
  (blink-cursor-mode 0)
  (set-default 'cursor-type 'box)
  ;;(set-cursor-color "#ff1493") ;; it's set in the theme below

  ;; Highlight the line the cursor is on
  (global-hl-line-mode t)

  ;; Operate on visual, rather than logical, lines
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)



  ;; Clean up startup behaviour
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  (setq ring-bell-function 'ignore)

  ;; Go to any line with Alt-g
  (global-set-key "\M-g" 'goto-line)

  (setq initial-major-mode 'lisp-interaction-mode)

  ;; Save all backups in one directory
  ;; instead of scattering them all over the place
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC
* Functionality
  #+begin_src elisp
    (use-package undo-tree
      :defer t
      :diminish undo-tree-mode
      :init (global-undo-tree-mode)
      :custom
      (undo-tree-visualizer-diff t)
      (undo-tree-visualizer-timestamps t))

    (use-package discover-my-major
      :bind ("C-h C-m" . discover-my-major))


        ;; AVY
         (use-package avy
          :defer t
          :custom
          (avy-timeout-seconds 0.3)
          (avy-style 'pre)
          :custom-face
          (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold)))));

(use-package ace-window
  :bind ("C-x C-o" . ace-window))

  #+end_src

** Misc
   #+begin_src elisp
  ;; UTF-8 stuff
 (unless *sys/win32*
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8))
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))


;; Remove useless whitespace before saving a file
(defun delete-trailing-whitespace-except-current-line ()
  "An alternative to `delete-trailing-whitespace'.

The original function deletes trailing whitespace of the current line."
  (interactive)
  (let ((begin (line-beginning-position))
        (end (line-end-position)))
    (save-excursion
      (when (< (point-min) (1- begin))
        (save-restriction
          (narrow-to-region (point-min) (1- begin))
          (delete-trailing-whitespace)
          (widen)))
      (when (> (point-max) (+ end 2))
        (save-restriction
          (narrow-to-region (+ end 2) (point-max))
          (delete-trailing-whitespace)
          (widen))))))

(defun smart-delete-trailing-whitespace ()
  "Invoke `delete-trailing-whitespace-except-current-line' on selected major modes only."
  (unless (member major-mode '(diff-mode))
    (delete-trailing-whitespace-except-current-line)))

(add-hook 'before-save-hook #'smart-delete-trailing-whitespace)

;; Replace selection on insert
(delete-selection-mode 1)

;; Map Alt key to Meta
(setq x-alt-keysym 'meta)


(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup "05:00am")
  (recentf-max-saved-items 200)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)

;; Set history-length longer
(setq-default history-length 500)


;;; small stuff
;; Move the backup fies to user-emacs-directory/.backup
(setq backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))

;; Ask before killing emacs
(setq confirm-kill-emacs 'y-or-n-p)

;; Turn Off Cursor Alarms
(setq ring-bell-function 'ignore)

;; Show Keystrokes in Progress Instantly
(setq echo-keystrokes 0.1)

;; Don't Lock Files
(setq-default create-lockfiles nil)

;; Better Compilation
(setq-default compilation-always-kill t) ; kill compilation process before starting another

(setq-default compilation-ask-about-save nil) ; save all buffers on `compile'

(setq-default compilation-scroll-output t)

;; ad-handle-definition warnings are generated when functions are redefined with `defadvice',
;; they are not helpful.
(setq ad-redefinition-action 'accept)

;; Move Custom-Set-Variables to Different File
(setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
(load custom-file 'noerror)

;; So Long mitigates slowness due to extremely long lines.
;; Currently available in Emacs master branch *only*!
(when (fboundp 'global-so-long-mode)
  (global-so-long-mode))

;; Add a newline automatically at the end of the file upon save.
(setq require-final-newline t)

;; Default .args, .in, .out files to text-mode
(add-to-list 'auto-mode-alist '("\\.in\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.out\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.args\\'" . text-mode))
(add-to-list 'auto-mode-alist '("\\.bb\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.bbclass\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))


   #+end_src
*** Resize windows
    #+begin_src elisp
    ;; Resizes the window width based on the input
(defun resize-window-width (w)
  "Resizes the window width based on W."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window width in [1~9]x10%: ")
                       (error "You need more than 1 window to execute this function!"))))
  (message "%s" w)
  (window-resize nil (- (truncate (* (/ w 10.0) (frame-width))) (window-total-width)) t))

;; Resizes the window height based on the input
(defun resize-window-height (h)
  "Resizes the window height based on H."
  (interactive (list (if (> (count-windows) 1)
                         (read-number "Set the current window height in [1~9]x10%: ")
                       (error "You need more than 1 window to execute this function!"))))
  (message "%s" h)
  (window-resize nil (- (truncate (* (/ h 10.0) (frame-height))) (window-total-height)) nil))

;; Setup shorcuts for window resize width and height
;(global-set-key (kbd "C-z w") #'resize-window-width)
;(global-set-key (kbd "C-z h") #'resize-window-height)

(defun resize-window (width delta)
  "Resize the current window's size.  If WIDTH is non-nil, resize width by some DELTA."
  (if (> (count-windows) 1)
      (window-resize nil delta width)
    (error "You need more than 1 window to execute this function!")))

;; Setup shorcuts for window resize width and height
(global-set-key (kbd "M-W =") (lambda () (interactive) (resize-window t 5)))
(global-set-key (kbd "M-W M-+") (lambda () (interactive) (resize-window t 5)))
(global-set-key (kbd "M-W -") (lambda () (interactive) (resize-window t -5)))
(global-set-key (kbd "M-W M-_") (lambda () (interactive) (resize-window t -5)))

(global-set-key (kbd "M-H =") (lambda () (interactive) (resize-window nil 5)))
(global-set-key (kbd "M-H M-+") (lambda () (interactive) (resize-window nil 5)))
(global-set-key (kbd "M-H -") (lambda () (interactive) (resize-window nil -5)))
(global-set-key (kbd "M-H M-_") (lambda () (interactive) (resize-window nil -5)))
    #+end_src

* Packages
** Setup
** Appearance
*** Fonts
#+begin_src elisp
;; FontsList
;; Input Mono, Monaco Style, Line Height 1.3 download from http://input.fontbureau.com/
(defvar font-list '(("Input" . 11) ("SF Mono" . 12) ("Consolas" . 12) ("Love LetterTW" . 12.5))
  "List of fonts and sizes.  The first one available will be used.")
;; -FontsList

;; FontFun
(defun change-font ()
  "Documentation."
  (interactive)
  (let* (available-fonts font-name font-size font-setting)
    (dolist (font font-list (setq available-fonts (nreverse available-fonts)))
      (when (member (car font) (font-family-list))
        (push font available-fonts)))
    (if (not available-fonts)
        (message "No fonts from the chosen set are available")
      (if (called-interactively-p 'interactive)
          (let* ((chosen (assoc-string (completing-read "What font to use? " available-fonts nil t) available-fonts)))
            (setq font-name (car chosen) font-size (read-number "Font size: " (cdr chosen))))
        (setq font-name (caar available-fonts) font-size (cdar available-fonts)))
      (setq font-setting (format "%s-%d" font-name font-size))
      (set-frame-font font-setting nil t)
      (add-to-list 'default-frame-alist (cons 'font font-setting)))))

(when (display-graphic-p)
  (change-font))
;; -FontFun


#+end_src
*** Themes
#+BEGIN_SRC elisp
(use-package doom-themes
  :custom-face
  (cursor ((t (:background  "#ff1493"))))
  :config
  ;; flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (load-theme 'doom-nord t) ;;;;;; <<<---- change theme here
  (defun switch-theme ()
    "An interactive funtion to switch themes."
    (interactive)
    (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
    (call-interactively #'load-theme)))

(use-package doom-modeline
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  (doom-modeline-minor-modes t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-height 15)
  :config
  (doom-modeline-mode))


      ;;(use-package smart-mode-line
      ;; :config
      ;;(sml/setup)
     ;;(setq sml/theme 'respectful))

    ;;(use-package all-the-icons)
    ;;(use-package nord-theme)


;;  (use-package doom-themes)

  ;; Global settings (defaults)
;;  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;;    doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  ;;(load-theme 'doom-nord t)

  ;; Enable flashing mode-line on errors
  ;;(doom-themes-visual-bell-config)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; or for treemacs users
  ;;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ;;(doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  ;;(doom-themes-org-config)
    ;;(use-package doom-modeline
    ;;  :config
  ;;  (doom-modeline-mode 1))
(use-package all-the-icons :if (display-graphic-p))

(set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
(set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'append)
(set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'append)
(set-fontset-font t 'unicode (font-spec :family "github-octicons") nil 'append)
(set-fontset-font t 'unicode (font-spec :family "FontAwesome") nil 'append)
(set-fontset-font t 'unicode (font-spec :family "Weather Icons") nil 'append)


(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955)
          ("delta" . 120517)
          ("epsilon" . 120518)
          ("->" . 8594)
          ("<=" . 8804)
          (">=" . 8805)
          )))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)

#+END_SRC
*** Dashboard
    #+begin_src elisp
    (use-package dashboard
  :disabled
  :demand
  :diminish (dashboard-mode page-break-lines-mode)
  :bind
  (("C-c C-d" . open-dashboard)
   :map dashboard-mode-map
   (("n" . dashboard-next-line)
    ("p" . dashboard-previous-line)
    ("N" . dashboard-next-section)
    ("F" . dashboard-previous-section)))
  :custom
  (dashboard-banner-logo-title "Close the world. Open the nExt.")
  (dashboard-startup-banner (expand-file-name "images/KEC_Dark_BK_Small.png" user-emacs-directory))
  (dashboard-items '((recents  . 7)
                     (bookmarks . 7)
                     (agenda . 5)))
  (initial-buffer-choice (lambda () (get-buffer dashboard-buffer-name)))
  (dashboard-set-heading-icons t)
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   (if (featurep 'all-the-icons)
       `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust -0.05)
           "M-EMACS" "Browse M-EMACS Homepage"
           (lambda (&rest _) (browse-url "https://github.com/MatthewZMD/.emacs.d")))
          (,(all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.1)
           "Configuration" "" (lambda (&rest _) (edit-configs)))
          (,(all-the-icons-faicon "cogs" :height 1.0 :v-adjust -0.1)
           "Update" "" (lambda (&rest _) (auto-package-update-now)))))
     `((("" "M-EMACS" "Browse M-EMACS Homepage"
         (lambda (&rest _) (browse-url "https://github.com/MatthewZMD/.emacs.d")))
        ("" "Configuration" "" (lambda (&rest _) (edit-configs)))
        ("" "Update" "" (lambda (&rest _) (auto-package-update-now)))))))
  :custom-face
  (dashboard-banner-logo-title ((t (:family "Love LetterTW" :height 123))))
  :config
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  (dashboard-setup-startup-hook)
  ;; Open Dashboard function
  (defun open-dashboard ()
    "Open the *dashboard* buffer and jump to the first widget."
    (interactive)
    (if (get-buffer dashboard-buffer-name)
        (kill-buffer dashboard-buffer-name))
    (dashboard-insert-startupify-lists)
    (switch-to-buffer dashboard-buffer-name)
    (goto-char (point-min))
    (delete-other-windows)))
    #+end_src
*** Solaire Mode
#+BEGIN_SRC elisp
(use-package solaire-mode
  :hook
  ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
  (minibuffer-setup . solaire-mode-in-minibuffer)
  :config
  (solaire-global-mode +1)
  (solaire-mode-swap-bg))
#+END_SRC
*** In-buffer
#+BEGIN_SRC elisp
;  (use-package pretty-mode
;    :config
;    (global-pretty-mode t))

(use-package page-break-lines
  :diminish
  :init (global-page-break-lines-mode))
#+END_SRC
** Editor
*** treemacs
    #+begin_src elisp

  ;; ATIPac
  (use-package all-the-icons :if (display-graphic-p))
  ;; -ATIPac

    (use-package treemacs
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :custom
      (treemacs-collapse-dirs 3)
      (treemacs-deferred-git-apply-delay 0.5)
      (treemacs-display-in-side-window t)
      (treemacs-file-event-delay 5000)
      (treemacs-file-follow-delay 0.2)
      (treemacs-follow-after-init t)
      (treemacs-follow-recenter-distance 0.1)
      (treemacs-git-command-pipe "")
      (treemacs-goto-tag-strategy 'refetch-index)
      (treemacs-indentation 2)
      (treemacs-indentation-string " ")
      (treemacs-is-never-other-window nil)
      (treemacs-max-git-entries 5000)
      (treemacs-no-png-images nil)
      (treemacs-no-delete-other-windows t)
      (treemacs-project-follow-cleanup nil)
      (treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
      (treemacs-recenter-after-file-follow nil)
      (treemacs-recenter-after-tag-follow nil)
      (treemacs-show-cursor nil)
      (treemacs-show-hidden-files t)
      (treemacs-silent-filewatch nil)
      (treemacs-silent-refresh nil)
      (treemacs-sorting 'alphabetic-desc)
      (treemacs-space-between-root-nodes t)
      (treemacs-tag-follow-cleanup t)
      (treemacs-tag-follow-delay 1.5)
      (treemacs-width 35)
      :config
      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      :bind
      (("M-0"       . treemacs-select-window)
       ("C-x t 1"   . treemacs-delete-other-windows)
       ("C-x t t"   . treemacs)
       ("C-x t B"   . treemacs-bookmark)
       ("C-x t C-t" . treemacs-find-file)
       ("C-x t M-t" . treemacs-find-tag))
      (:map treemacs-mode-map ("C-p" . treemacs-previous-line)))
      (use-package treemacs-evil)
    #+end_src
*** yasnippet
    #+begin_src elisp

  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
          (("TAB" . smarter-yas-expand-next-field)
           ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick)))
        (yas-expand)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ignore-errors (yas-next-field))))))
    #+end_src

*** Misc
#+BEGIN_SRC elisp

      ;; TODO sclang
      ;(add-to-list 'load-path "~/code/misc/aoetuhatoeuh/el")
      ;(require 'sclang)

(use-package delete-block
  :load-path (lambda () (expand-file-name "site-elisp/delete-block" user-emacs-directory))
  :bind
  (("M-d" . delete-block-forward)
   ("C-<backspace>" . delete-block-backward)
   ("M-<backspace>" . delete-block-backward)
   ("M-DEL" . delete-block-backward)))


      (use-package multiple-cursors)
      (use-package general)

      (use-package evil
        :config
        (evil-mode 1))



      ;; (use-package yasnippet
      ;;   :config
      ;;   (yas-global-mode 1)
      ;;   (define-key yas-minor-mode-map (kbd "<tab>") nil)
      ;;   (define-key yas-minor-mode-map (kbd "TAB") nil)
      ;;   (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand))






      ;; When a key combination has started, after a while
      ;; displays all possible keys to complete it
    (use-package which-key
      :diminish
      :custom
      (which-key-separator " ")
      (which-key-prefix-prefix "+")
      :config
      (which-key-mode))


      (use-package ido
        :config
        (ido-mode 1)
        (setq ido-enable-flex-matching t
              ido-create-new-buffer 'always
              ido-everywhere t))
      (use-package ido-vertical-mode
        :init
        (ido-vertical-mode 1))

      ;;(use-package linum-relative
      ;;  :config
      ;;  (linum-relative-mode))

#+end_src
*** Parens
#+begin_src elisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
          ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)
          ("C-M-a" . sp-backward-down-sexp)
          ("C-M-e" . sp-up-sexp)
          ("C-M-w" . sp-copy-sexp)
          ("C-M-k" . sp-change-enclosing)
          ("M-k" . sp-kill-sexp)
          ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
          ("C-S-<backspace>" . sp-splice-sexp-killing-around)
          ("C-]" . sp-select-next-thing-exchange))
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))


  (use-package parinfer-rust-mode
    :init
    (setq parinfer-rust-auto-download t)

    :hook
    emacs-lisp-mode
    lisp-mode
    clojure-mode
    common-lisp-mode
    racket-mode
    scheme-mode)

  ;;   (use-package awesome-pair
  ;; :load-path (lambda () (expand-file-name "site-elisp/awesome-pair" user-emacs-directory))
  ;; :bind
  ;; (:map prog-mode-map
  ;;       (("M-D" . awesome-pair-kill)
  ;;        ("SPC" . awesome-pair-space)
  ;;        ("=" . awesome-pair-equal)
  ;;        ("M-F" . awesome-pair-jump-right)
  ;;        ("M-B" . awesome-pair-jump-left)))
  ;; :hook (prog-mode . awesome-pair-mode))
  ;;

  ;; parinfer has been deprecated, perhaps can still use through github?
    ;; (use-package parinfer
    ;;   :bind
    ;;   (("C-," . parinfer-toggle-mode))
    ;;   :init
    ;;   (progn
    ;;     (setq parinfer-extensions
    ;;           '(defaults       ; should be included.
    ;;              pretty-parens  ; different paren styles for different modes.
    ;;              evil           ; If you use Evil.
    ;;                                         ;lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
    ;;              paredit        ; Introduce some paredit commands.
    ;;              smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
    ;;              smart-yank))   ; Yank behavior depend on mode.
    ;;     (add-hook 'clojure-mode-hook #'parinfer-mode)
    ;;     (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    ;;     (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    ;;     (add-hook 'scheme-mode-hook #'parinfer-mode)
    ;;     (add-hook 'lisp-mode-hook #'parinfer-mode)
    ;;     (add-hook 'racket-mode-hook #'parinfer-mode)))
#+END_SRC
*** Indentation
    #+begin_src elisp
    (use-package highlight-indent-guides
  :if (display-graphic-p)
  :diminish
  ;; Enable manually if needed, it a severe bug which potentially core-dumps Emacs
  ;; https://github.com/DarthFennec/highlight-indent-guides/issues/76
  :commands (highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-auto-character-face-perc 7))

(setq-default indent-tabs-mode nil)
(setq-default indent-line-function 'insert-tab)
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
(setq-default js-switch-indent-offset 4)
(c-set-offset 'comment-intro 0)
(c-set-offset 'innamespace 0)
(c-set-offset 'case-label '+)
(c-set-offset 'access-label 0)
(c-set-offset (quote cpp-macro) 0 nil)
(defun smart-electric-indent-mode ()
  "Disable 'electric-indent-mode in certain buffers and enable otherwise."
  (cond ((and (eq electric-indent-mode t)
              (member major-mode '(erc-mode text-mode)))
         (electric-indent-mode 0))
        ((eq electric-indent-mode nil) (electric-indent-mode 1))))
(add-hook 'post-command-hook #'smart-electric-indent-mode)
    #+end_src
*** Iedit
    #+begin_src elisp
    (use-package iedit
  ;;:bind ("C-z ," . iedit-mode)
  :diminish)
    #+end_src
*** Quickrun
    #+begin_src elisp
    (use-package quickrun
  :bind
  (("<f5>" . quickrun)
   ("M-<f5>" . quickrun-shell)
   ("C-c e" . quickrun)
   ("C-c C-e" . quickrun-shell)))
    #+end_src
*** Format All
    #+begin_src elisp
    (use-package format-all
  :bind ("C-c C-f" . format-all-buffer))
    #+end_src
*** Comments
    #+begin_src elisp
    (use-package evil-nerd-commenter
  :bind
  (("C-c M-;" . c-toggle-comment-style)
   ("M-;" . evilnc-comment-or-uncomment-lines)))
    #+end_src
*** Org Mode
#+BEGIN_SRC elisp
;; So that `< s TAB` expands to a source block
(require 'org-tempo)
#+END_SRC
*** Multiple Cursors
#+BEGIN_SRC elisp
(use-package multiple-cursors)
#+END_SRC
** Languages
*** Org
    #+begin_src elisp
    (use-package org
  :ensure nil
  :defer t
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         (:map org-mode-map (("C-c C-p" . eaf-org-export-to-pdf-and-open)
                             ("C-c ;" . nil))))
  :custom
  (org-log-done 'time)
  (calendar-latitude 43.65107) ;; Prerequisite: set it to your location, currently default: Toronto, Canada
  (calendar-longitude -79.347015) ;; Usable for M-x `sunrise-sunset' or in `org-agenda'
  (org-export-backends (quote (ascii html icalendar latex md odt)))
  (org-use-speed-commands t)
  (org-confirm-babel-evaluate 'nil)
  (org-latex-listings-options '(("breaklines" "true")))
  (org-latex-listings t)
  (org-deadline-warning-days 7)
  (org-todo-keywords
   '((sequence "TODO" "IN-PROGRESS" "REVIEW" "|" "DONE" "CANCELED")))
  (org-agenda-window-setup 'other-window)
  (org-latex-pdf-process
   '("pdflatex -shelnl-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  :config
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (unless (version< org-version "9.2")
    (require 'org-tempo))
  (when (file-directory-p "~/org/agenda/")
    (setq org-agenda-files (list "~/org/agenda/")))

  (defun org-export-toggle-syntax-highlight ()
    "Setup variables to turn on syntax highlighting when calling `org-latex-export-to-pdf'."
    (interactive)
    (setq-local org-latex-listings 'minted)
    (add-to-list 'org-latex-packages-alist '("newfloat" "minted")))

  (defun org-table-insert-vertical-hline ()
    "Insert a #+attr_latex to the current buffer, default the align to |c|c|c|, adjust if necessary."
    (interactive)
    (insert "#+attr_latex: :align |c|c|c|")))


(use-package toc-org
  :hook (org-mode . toc-org-mode))
    #+end_src
*** LSP
    #+begin_src elisp
    (use-package lsp-mode
  :defer t
  :commands lsp
  :custom
  (lsp-auto-guess-root nil)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  (lsp-file-watch-threshold 2000)
  (read-process-output-max (* 1024 1024))
  (lsp-eldoc-hook nil)
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((java-mode python-mode go-mode
          js-mode js2-mode typescript-mode web-mode
          c-mode c++-mode objc-mode) . lsp))
    #+end_src
*** Checking
    #+begin_src elisp
    (use-package flycheck
  :defer t
  :diminish
  :hook (after-init . global-flycheck-mode)
  :commands (flycheck-add-mode)
  :custom
  (flycheck-global-modes
   '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-indication-mode (if (display-graphic-p) 'right-fringe 'right-margin))
  :init
  (if (display-graphic-p)
      (use-package flycheck-posframe
        :custom-face
        (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
        (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
        :hook (flycheck-mode . flycheck-posframe-mode)
        :custom
        (flycheck-posframe-border-width 4)
        (flycheck-posframe-inhibit-functions
         '((lambda (&rest _) (bound-and-true-p company-backend)))))
    (use-package flycheck-pos-tip
      :defines flycheck-pos-tip-timeout
      :hook (flycheck-mode . flycheck-pos-tip-mode)
      :custom (flycheck-pos-tip-timeout 30)))
  :config
  (use-package flycheck-popup-tip
    :hook (flycheck-mode . flycheck-popup-tip-mode))
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center))
  (when (executable-find "vale")
    (use-package flycheck-vale
      :config
      (flycheck-vale-setup)
      (flycheck-add-mode 'vale 'latex-mode))))

(use-package flyspell
  :ensure nil
  :diminish
  :if (executable-find "aspell")
  :hook (((text-mode outline-mode latex-mode org-mode markdown-mode) . flyspell-mode))
  :custom
  (flyspell-issue-message-flag nil)
  (ispell-program-name "aspell")
  (ispell-extra-args
   '("--sug-mode=ultra" "--lang=en_US" "--camel-case"))
  :config
  (use-package flyspell-correct-ivy
    :after ivy
    :bind
    (:map flyspell-mode-map
          ([remap flyspell-correct-word-before-point] . flyspell-correct-wrapper)
          ("C-." . flyspell-correct-wrapper))
    :custom (flyspell-correct-interface #'flyspell-correct-ivy)))

(use-package dumb-jump
  :bind
  (:map prog-mode-map
        (("C-c C-o" . dumb-jump-go-other-window)
         ("C-c C-j" . dumb-jump-go)
         ("C-c C-i" . dumb-jump-go-prompt)))
  :custom (dumb-jump-selector 'ivy))


    #+end_src
*** Completion
**** Company
     #+begin_src elisp
     (use-package company
  :diminish company-mode
  :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
  :bind
  (:map company-active-map
        ([tab] . smarter-tab-to-complete)
        ("TAB" . smarter-tab-to-complete))
  :custom
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)
  ;; Don't use company in the following modes
  (company-global-modes '(not shell-mode eaf-mode))
  ;; Trigger completion immediately.
  (company-idle-delay 0.1)
  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t)
  :config
  (unless clangd-p (delete 'company-clang company-backends))
  (global-company-mode 1)
  (defun smarter-tab-to-complete ()
    "Try to `org-cycle', `yas-expand', and `yas-next-field' at current cursor position.

If all failed, try to complete the common part with `company-complete-common'"
    (interactive)
    (if yas-minor-mode
        (let ((old-point (point))
              (old-tick (buffer-chars-modified-tick))
              (func-list '(org-cycle yas-expand yas-next-field)))
          (catch 'func-suceed
            (dolist (func func-list)
              (ignore-errors (call-interactively func))
              (unless (and (eq old-point (point))
                           (eq old-tick (buffer-chars-modified-tick)))
                (throw 'func-suceed t)))
            (company-complete-common))))))
     #+end_src
**** Misc
    #+begin_src elisp
      (use-package ivy
        :defer 0.1
        :config (ivy-mode))

      ;; (use-package lsp-mode
      ;;   :hook (c-mode-common . lsp-deferred)
      ;;   :commands (lsp lsp-deferred)
      ;;   :custom
      ;;   (lsp-idle-delay 1)
      ;;   (lsp-completion-provider :capf)
      ;;   (lsp-enable-file-watchers nil)
      ;;   (lsp-keymap-prefix "s-l"))

      (use-package lsp-ivy
        :commands lsp-ivy-workspace-symbol)
    #+end_src
***Cheking
*** Lisp
    #+begin_src elisp

    #+end_src
*** Haskell
#+BEGIN_SRC elisp
(use-package haskell-mode
  :mode "\\.hs\\'")
  ;(use-package intero)
  (use-package dante)
#+END_SRC
*** C++
    #+begin_src elisp
   ;;cmake
   (use-package cmake-mode
   :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
(use-package cmake-font-lock
:after (cmake-mode)
:hook (cmake-mode . cmake-font-lock-activate))




(use-package modern-cpp-font-lock
  :diminish t
  :init (modern-c++-font-lock-global-mode t))
    #+end_src
*** Python
    #+begin_src elisp
    (use-package python-mode
  :ensure nil
  :after flycheck
  :mode "\\.py\\'"
  :custom
  (python-indent-offset 4)
  (flycheck-python-pycompile-executable "python3")
  (python-shell-interpreter "python3"))
    #+end_src
*** Rust
    #+begin_src elisp
  (use-package rust-mode)
  (use-package cargo)
  (use-package flycheck-rust)
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    #+end_src
*** Extempore
    #+begin_src elisp
    (use-package extempore-mode)
    #+end_src
*** Others
#+BEGIN_SRC elisp



  ;(package-install-file "~/code/misc/extempore-emacs-mode")
  ;(package-install-file "~/.config/emacs/misc")
  (use-package racket-mode)


(use-package json-mode
  :mode "\\.json\\'")
#+END_SRC

** TODO Misc

#+BEGIN_SRC elisp

;;(use-package org-ref)
  (defconst timelines-mode-path "~/code/timelines-emacs/timelines-mode.el")
  ;;(load timelines-mode-path)
  (defconst timelines-path "~/code/misc/timelines")






#+END_SRC

* Config

#+BEGIN_SRC elisp
(global-display-line-numbers-mode 1)
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Key bindings

#+BEGIN_SRC elisp


  (defconst leader-key "SPC")

  (general-def
    :keymaps 'shell-mode-map
    :prefix leader-key
    "C-n" 'comint-previous-input
    "C-t" 'comint-next-input)

  (general-def
    :keymaps 'timelines-mode-map
    :states 'normal
    "RET" 'timelines-eval-region)

  (general-def
    :states '(normal visual motion)
    :keymaps 'visual-line-mode-map
    "t" 'evil-next-visual-line
    "n" 'evil-previous-visual-line
    )

        ;;;; Inside a buffer
  (general-def
    :states '(normal visual motion)
    :keymaps 'override

    "h" 'backward-char
    "t" 'evil-next-visual-line
    "n" 'evil-previous-visual-line
    "s" 'forward-char

    "H" 'evil-backward-word-begin
    "T" 'evil-forward-paragraph
    "N" 'evil-backward-paragraph
    "S" 'evil-forward-word-end

    "e" 'evil-delete
    "a" 'evil-avy-goto-char

    ";" 'undo-tree-undo
    ":" 'undo-tree-redo

    "'" 'evil-ex

    "E" 'evil-delete-whole-line

    "cg" 'evil-snipe-F
    "cG" 'evil-snipe-T
    "cr" 'evil-snipe-f
    "cR" 'evil-snipe-t
    "cc" 'evil-snipe-repeat

    "gg" 'evil-beginning-of-visual-line
    "gr" 'evil-end-of-visual-line
    "gc" 'evil-goto-first-line
    "gt" 'evil-goto-line

    "G" 'evil-scroll-down
    "R" 'evil-scroll-up


    "SPC c /" 'comment-or-uncomment-region
    "j" 'evil-change


    "u" 'evil-insert
    "U" 'evil-insert-line
    "i" 'evil-append
    "I" 'evil-append-line


    "p" 'evil-paste-after;; -from-0

    "oe" 'evil-open-below
    "ou" 'evil-open-above

    "-" 'newline-and-indent

    "k" 'evil-scrll-page-down
    "K" 'evil-scroll-page-up

    )



  (general-def
    :states 'normal
    :keymaps 'org-mode-map

    "M-t" 'org-metadown
    "M-n" 'org-metaup
    "M-h" 'org-metaleft
    "M-s" 'org-metaright

    ;; "S-t" 'org-shiftdown
    ;; "S-n" 'org-shiftup
    ;; "S-h" 'org-shiftleft
    ;; "S-s" 'org-shiftright
    ;;
    )

  ;; ;
    ;;; WINDOWS AND BUFFERS
  (general-def
    :states 'normal
    :keymaps 'override
    :prefix leader-key


    "w k" 'split-window-below
    "w u" 'split-window-right
    ;;
    "w E" 'delete-other-windows
    "w e" 'delete-window
    ;;
    "w h" 'evil-window-left
    "w s" 'evil-window-right
    "w t" 'evil-window-down
    "w n" 'evil-window-up


    "f f" 'ido-find-file
    "f p" 'open-config-file

    "b s" 'save-buffer
    "b b" 'ido-switch-buffer
    "b e" 'ido-kill-buffer

    "o e" 'shell

    "b s" 'save-buffer

    "c p" 'reload-config-file
    ;;"w H" '+evil/window-move-left
    ;;"w S" '+evil/window-move-right
    ;;"w T" '+evil/window-move-down
    ;;"w N" '+evil/window-move-up

    )


  (defun open-config-file ()
    (interactive)
    (find-file emacs-config-literate-f))

  (defun reload-config-file ()
    (interactive)
    (load-file emacs-config-tangled-f))
  ;; Reload the init file with a key binding
  ;;(global-set-key (kbd "C-c p")
  ;;"SPC-f-." 'counsel-find-file


  ;;
  ;;
  ;;(lookup-key (current-global-map) (kbd "Esc-g"))





  (general-def
    "C-}" 'text-scale-increase
    "C-{" 'text-scale-decrease)
#+END_SRC
** General

#+BEGIN_SRC elisp
#+END_SRC
* Misc
