
* Packages
#+BEGIN_SRC elisp
  (use-package general)

  (use-package evil
    :config
    (evil-mode 1))
(use-package haskell-mode)


(use-package general)


(use-package yasnippet
  :config 
  (yas-global-mode 1)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand))




(use-package which-key
  :config (which-key-mode))

;; Use ido for autocompletion
(use-package ido
  :config
  (ido-mode 1)
  (setq ido-enable-flex-matching nil
	ido-create-new-buffer 'always
	ido-everywhere t))

(use-package ido-vertical-mode
  :init
  (ido-vertical-mode 1))


(use-package nord-theme)




(general-def
  :keymaps 'timelines-mode-map
  :states 'normal
  "RET" 'timelines-eval-region)



#+END_SRC
* Key bindings
#+BEGIN_SRC elisp

(general-def
  :states '(normal visual motion)
  :keymaps 'visual-line-mode-map
  "t" 'evil-next-visual-line
  "n" 'evil-previous-visual-line
  )

(general-def
  :states '(normal visual motion)
  :keymaps 'override

  "h" 'backward-char
  "t" 'evil-next-visual-line
  "n" 'evil-previous-visual-line
  "s" 'forward-char

  "H" 'evil-backward-word-begin
  "T" 'evil-forward-paragraph
  "N" 'evil-backward-paragraph
  "S" 'evil-forward-word-end

  "e" 'evil-delete
  "a" 'evil-avy-goto-char

  ";" 'undo-tree-undo
  ":" 'undo-tree-redo

  "'" 'evil-ex

  "E" 'evil-delete-whole-line

  "cg" 'evil-snipe-F
  "cG" 'evil-snipe-T
  "cr" 'evil-snipe-f
  "cR" 'evil-snipe-t
  "cc" 'evil-snipe-repeat

  "gg" 'evil-beginning-of-visual-line
  "gr" 'evil-end-of-visual-line
  "gc" 'evil-goto-first-line
  "gt" 'evil-goto-line

  "G" 'evil-scroll-down
  "R" 'evil-scroll-up


  "SPC c /" 'comment-or-uncomment-region
  "j" 'evil-change


  "u" 'evil-insert
  "U" 'evil-insert-line
  "i" 'evil-append
  "I" 'evil-append-line


  "p" 'evil-paste-after;; -from-0

  "oe" 'evil-open-below
  "ou" 'evil-open-above

  "-" 'newline-and-indent

"k" 'evil-scroll-page-down
"K" 'evil-scroll-page-up
  )



(defvar leader-key "SPC")


(general-def
  :states 'normal
  :keymaps 'override
  :prefix leader-key

  "b s" 'save-buffer

  "w h" 'evil-window-left
  "w s" 'evil-window-right
  "w t" 'evil-window-down
  "w n" 'evil-window-up

  "w H" '+evil/window-move-left
  "w S" '+evil/window-move-right
  "w T" '+evil/window-move-down
  "w N" '+evil/window-move-up
  )




;;"SPC-f-." 'counsel-find-file


;;
;;
;;(lookup-key (current-global-map) (kbd "Esc-g"))





(general-def
  "C-}" 'text-scale-increase
  "C-{" 'text-scale-decrease)
#+END_SRC
* Misc

#+BEGIN_SRC elisp

;;;;;;;;;;;;;; Setup some more user-friendly functionality and defaults (e.g. the usual cut/copy/paste bindings)

;; When a key combination has started, after a while
;; displays all possible keys to complete it

;; Type 'y' or 'n' instead of 'yes' or 'no'
(fset 'yes-or-no-p 'y-or-n-p)

;; Replaces a selection with any letter pressed
(delete-selection-mode 1)

(setq scroll-conservatively 100
      select-enable-clipboard t
      show-paren-delay 0
      show-trailing-whitespace nil)


;;;;;;;;;;;;;; Setup themes and other aesthetic stuff

;; Set the mood, there's plenty of other themes to choose from here:
;; https://emacsthemes.ocm/popular/index.html

;; Set the window's name
(setq frame-title-format "TimeLines")

;; Remove unecessary distractions from the frame
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))

(line-number-mode 1)
(show-paren-mode 1)

;; Cursor settings
(blink-cursor-mode 0)
(set-default 'cursor-type 'box)
(set-cursor-color "#ff1493")

;; Highlight the line the cursor is on
(global-hl-line-mode t)

;; Operate on visual, rather than logical, lines
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

;; Reload the init file with a key binding
(global-set-key (kbd "C-c p")
		(lambda ()
		  (interactive)
		  (load-file "~/.emacs.d/init.el")))


;; Clean up startup behaviour
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(setq ring-bell-function 'ignore)

;; Go to any line with Alt-g
(global-set-key "\M-g" 'goto-line)

(setq initial-major-mode 'lisp-interaction-mode)

;; Display a more useful startup text
(let ((startup-file "~/.emacs.d/mini-tutorial.org"))
  (when (and (file-exists-p startup-file)
             (get-buffer "*scratch*"))
    (with-current-buffer "*scratch*"
      (erase-buffer)
      (insert-file-contents startup-file)
      (org-mode))))

;;;;;;;;;;;;;; Lastly, load a local-config.el file if it exists. This is where you should put your own configuration.

#+END_SRC
